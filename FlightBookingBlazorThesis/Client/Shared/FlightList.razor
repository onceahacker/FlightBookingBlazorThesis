@inject IFlightService FlightService
@implements IDisposable

@if(FlightService.Flights == null || FlightService.Flights.Count == 0)
{
    <span> @FlightService.Message</span>
}
else
{

<u1 class="list-unstyled">
    @foreach (var flight in FlightService.Flights)
    {
        <li class="media my-3">
            <div class= "media-img_wrapper mr-2">
                    <a href="/flight/@flight.Number">
                        <img class="media-img" src="@flight.ImageUrl" atl="@flight.Destination" />
                    </a>
                 </div>
                 <div class="media-body">
                    <a href="/flight/@flight.Number">
                        <h4 class="mb-0">@flight.DepartureCity > @flight.Destination</h4>
                    </a>
                <p>@flight.Details</p>
                    <p><strong>Departure Date:</strong> @flight.DepartureDate.ToString("dd-MM-yyyy HH:mm:ss")
                        <br/>
                    <strong>Arrival Date:</strong> @flight.ArrivalDate.ToString("dd-MM-yyyy HH:mm:ss")</p>
                <h5 class="price">
                        @GetPriceText(flight)
                </h5>
            </div>
        </li>
    }

</u1>
}


@code {


    protected override void OnInitialized()
    {
        FlightService.FlightsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        FlightService.FlightsChanged -= StateHasChanged;
    }

    private string GetPriceText(Flight flight)
    {
        var variants = flight.Variants;
        if(variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"${ variants[0].Price}";

        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}